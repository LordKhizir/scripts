#!/usr/bin/env python3
import os
import subprocess


# Unpack & repack, folder by folder
# It just re-compresses everything... and moves to "done" folder
# Use it for mass processes, to avoid generating huge pools of files
# It takes care of NOT creating unnecessary nested dirs

def safe_execute(command):
    try:
        subprocess.run(command, shell=True, check=True)
    except subprocess.CalledProcessError:
        print("--- ERROR ---")
        exit(1)


def fix_double_folder(folder_name):
    # We always force the creation of a folder... just to avoid spitting out files directly to current folder
    # But most times the packed file already included a folder... so we can end with unnecessary nesting
    # We MUST also check there are no other files
    if os.path.exists(folder_name + "/" + folder_name) and len(os.listdir(folder_name)) == 1:
        os.rename(folder_name, folder_name + "_DELETE")
        os.rename(folder_name + "_DELETE/" + folder_name, folder_name)
        os.rmdir(folder_name + "_DELETE")


workFolder = "TMPWRKFLDR"
sum_size_old = 0
sum_size_new = 0
safe_execute('mkdir -p "' + workFolder + '"')

for entry in os.scandir("."):
    if entry.is_file():
        name, extension = os.path.splitext(entry.name)
        if extension.lower() in (".rar", ".zip", ".7z"):
            print("\n========================================================\n")
            print("Unpacking", entry.name)
            newFile = workFolder + '/' + name + '.7z'
            os.mkdir(name)
            if extension.lower() == ".rar":
                # Rar5 is not supported by 7z
                safe_execute('unrar x "' + entry.name + '" "' + name + '"')
            else:
                safe_execute('7z x "' + entry.name + '" -o"' + name + '"')
            fix_double_folder(name)

            print("Packing")
            safe_execute('7za a -t7z -m0=lzma2 -mx=9 -mqs=on -mfb=64 -md=1024m -ms=on ' +
                         '-xr!.DS_Store -xr!Thumbs.db -xr!desktop.ini ' +
                         '"' + newFile + '" "' + name + '/"')
            # Remove temp folder for the file
            safe_execute('rm -r "' + name + '"')

            size_old = os.path.getsize(entry.name)
            size_new = os.path.getsize(newFile)
            print("Old size:", size_old, " New size:", size_new)
            print('Savings:', ((size_old - size_new) * 100) / size_old, '% -- ', size_old - size_new, 'bytes')

            # If the original file was already a 7z, check if new file is smaller than the first one
            # sometimes it happens, depending on compression method
            if extension.lower() == ".7z":

                if size_old < size_new:
                    print("Restoring original file, as it's smaller")
                    safe_execute('mv "' + entry.name + '" "' + newFile + '"')
                    size_new = size_old
                else:
                    os.remove(entry.path)
            else:
                os.remove(entry.path)

            sum_size_old += size_old
            sum_size_new += size_new

# Move everything from working dir, and remove it
if os.path.exists(workFolder):
    safe_execute('mv ' + workFolder + '/* .')
    safe_execute('rm -r "' + workFolder + '"')

# Print some stats
print("\n========================================================\n")
print('Total size of original files:', sum_size_old)
print('Total size of repacked files:', sum_size_new)
print('Savings:', ((sum_size_old - sum_size_new) * 100) / sum_size_old, '% -- ', sum_size_old - sum_size_new, 'bytes')
# safe_execute('say -v Monica "Repack completado"')
