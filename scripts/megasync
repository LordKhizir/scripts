#!/usr/bin/python3


# PROBAR CON
# megasync --dryrun --folder "Rocket Pig Games/Rocket Pig Games - Tusklands [KS]" --debug

import argparse
import os
import subprocess
import textwrap
import time
import unicodedata

# Globals
_OLD_FILES = 'OLD_FILES'  # Const
_WAIT_SECONDS: int = 2
_TOP_LEVELS: int = 1
_FIRST_LEVEL_CONTINUE_FROM: str = ""
_DRY_RUN: bool = False
_SHOW: bool = False


class Content:
    def __init__(self, name: str, size: int, content_type: str, path: str, level: int):
        self.name = name
        self.normalized_name = ''.join(c for c in unicodedata.normalize('NFD', name)
                                       if unicodedata.category(c) != 'Mn')
        self.size = size
        if content_type.startswith('d'):
            self.content_type = 'D'
        else:
            self.content_type = 'F'
        self.path = safe_path(path)
        self.level = level
        self.fullname = self.path + "/" + self.normalized_name

    def __eq__(self, other):
        return self.fullname == other.fullname

    def __lt__(self, other):
        return self.fullname < other.fullname

    def __gt__(self, other):
        return self.fullname > other.fullname

    def is_dir(self):
        return self.content_type == 'D'

    def is_file(self):
        return self.content_type == 'F'

    def to_string(self):
        return '[name:[' + self.name + \
               '] size:[' + str(self.size) + \
               '] content_type:[' + self.content_type + \
               '] path:[' + self.path + \
               '] level:[' + str(self.level) + \
               '] fullname:[' + self.fullname + ']]'


def safe_call(command, ignore_error=False):
    try:
        debug("COMMAND", command)
        if ignore_error:
            proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
        else:
            proc = subprocess.Popen(command, stdout=subprocess.PIPE)
        result = proc.stdout.read()
        return result
    except subprocess.CalledProcessError:
        print("--- ERROR ---")
        exit(1)


def safe_path(path: str) -> str:
    while path.find('//') != -1:
        path = path.replace('//', '/')
    return path


# Call source ls, get results, and preformat them for later use
def source_ls(basePath: str, element: Content) -> [Content]:
    time.sleep(_WAIT_SECONDS)
    if element.level >= _TOP_LEVELS:
        list_mode = "-lr"
    else:
        list_mode = "-l"
    lines = safe_call([
        'mega-ls',
        list_mode,
        safe_path(basePath + '/' + element.path + '/' + element.name)
    ])
    index: int = 0
    contents: [] = []
    debug("MEGA result:", lines)
    content_path = element.path + '/' + element.name
    for line in lines.splitlines():
        index += 1
        debug("MEGA line:", line)
        decoded_line = line.decode('utf-8').strip()
        if decoded_line.startswith('FLAGS') or decoded_line == '':
            continue
        if decoded_line.endswith(':'):
            content_path = decoded_line.replace(basePath, '', 1).strip(':')
            continue
        parts = decoded_line.split(None, 5)
        content = Content(parts[5], parts[2], parts[0], content_path, element.level + 1)
        debug("MEGA content", content.to_string())
        if (content.name != content.normalized_name) \
                or (content.name.find(".getxfer.") != -1) \
                or (content.name.find(".DS_Store") != -1) \
                or (content.name.startswith("._")):
            print("\t🛑", "IGNORING Mega", content.path, content.name, content.normalized_name)
        elif content.content_type == 'D' \
                and content.level > _TOP_LEVELS:
            None
        else:
            contents.append(content)
        if (element.level == 0) and (content.name == _FIRST_LEVEL_CONTINUE_FROM):
            break
    return contents


def destination_ls(basePath: str, element: Content) -> [Content]:
    if element.level >= _TOP_LEVELS:
        list_mode = "-loR"
    else:
        list_mode = "-lo"
    lines = safe_call([
        'ls',
        list_mode,
        safe_path(basePath + '/' + element.path + '/' + element.name)
    ], ignore_error=True)
    index: int = 0
    contents: [] = []
    content_path = element.path + '/' + element.name
    for line in lines.splitlines():
        index += 1
        debug("LOCAL line:", line)
        decoded_line = line.decode('utf-8').strip()
        if decoded_line.startswith('total') or decoded_line == '':
            continue
        if decoded_line.endswith(':'):
            content_path = decoded_line.replace(basePath, '', 1).strip(':')
            continue
        parts = line.decode('utf-8').split(None, 7)
        if parts[7] == _OLD_FILES:
            continue  # The OLD FILES dir must not be processed... or we'll recurse it
        content = Content(parts[7], parts[3], parts[0], content_path, element.level + 1)
        debug("LOCAL content", content.to_string())
        if content.name != content.normalized_name:
            print("\t🛑", "IGNORING LOCAL", content.path, content.name, content.normalized_name)
        elif (content.content_type == 'D') \
                and (content.level > _TOP_LEVELS):
            None
        else:
            contents.append(content)
        if (element.level == 0) and (content.name == _FIRST_LEVEL_CONTINUE_FROM):
            break
    return contents


def createfolderifneeded(path):
    if not _DRY_RUN:
        if not os.path.exists(path):
            os.makedirs(path)


# Download file from source
def download(source_root: str, dest_root: str, content: Content):
    if not _DRY_RUN:
        createfolderifneeded(safe_path(dest_root + '/' + content.path))
        time.sleep(_WAIT_SECONDS)
        result = safe_call([
            'mega-get',
            source_root + '/' + content.path + '/' + content.name,
            dest_root + '/' + content.path
        ])
        print(result.decode('utf-8'))


# Remove file/folder from destination
def destination_remove(dest_root: str, content: Content):
    # check if directory exists or not yet
    old_path = dest_root + '/' + content.path
    new_path = dest_root + '/' + _OLD_FILES + '/' + content.path
    if not _DRY_RUN:
        createfolderifneeded(safe_path(new_path))
        os.replace(safe_path(old_path + '/' + content.name), safe_path(new_path + '/' + content.name))
    debug("OLD FILE Moved to", new_path)


def debug(*info):
    if debug_mode:
        print(info)


def startMega():
    if 'MEGAcmd' not in os.environ['PATH']:
        os.environ['PATH'] += ':/Applications/MEGAcmd.app/Contents/MacOS'
    safe_call(['mega-version'])


parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=textwrap.dedent('''\
    megasync
    Keep your folders in sync with Mega - ONE WAY ONLY

    It assumes Mega is your "source of truth".
    All syncs are then "down" syncs, it won't upload ANYTHING to Mega
    Works on top of mega-cmd, so you need to have it installed.
    
    Does a VERY conservative use of resources:
    - loop through folders
    - for each file, check if it needs to be updated
    - download file by file
    - Premise: Safe but slow if better than quick but inconsistent
    - Don't trust dates, only file sizes. If they have different size, the file needs to be updated.

    megasync
        Compress directories and files as 7z optimized files.
        If a target file or folder is provided, Pack will process it into a single 7z.
        If no target is provided, Pack will process all contents in current folder into individual 7z.
    '''))
parser.add_argument('root',
                    help='Root folder to be synced',
                    type=str,
                    nargs=1)
parser.add_argument('--destination',
                    help='Local FS destination folder',
                    type=str,
                    nargs='?',
                    default="/Users/toni.navarro/NAS")
parser.add_argument('--folder',
                    help='Folder or file to download sync',
                    type=str,
                    nargs='?')
parser.add_argument('--toplevels',
                    help='Levels of folders to be done traversed before doing them as a tree',
                    type=int,
                    nargs='?',
                    default=_TOP_LEVELS)
parser.add_argument('--continue_from',
                    help='If the process stopped, you can provide a LEVEL 1 from where to continue',
                    type=str,
                    nargs="?",
                    default="")
parser.add_argument('--wait',
                    help="Number of second to wait before MEGA requests",
                    type=int,
                    nargs='?',
                    default=_WAIT_SECONDS)
parser.add_argument('--sound',
                    help="Say a voice warning once the process is finished",
                    action="store_true")
parser.add_argument('--dryrun',
                    help="Only list actions to be performed, but don't execute them",
                    action="store_true")
parser.add_argument('--show',
                    help="Print info about already synced files, not only modifications",
                    action="store_true")
parser.add_argument('--debug',
                    help="Print extended info to allow debugging",
                    action="store_true")
args = parser.parse_args()

debug_mode = args.debug

# TODO implement login if needed

startMega()

sourceRoot = args.root
destRoot = args.destination + "/" + args.root

folder: str
if args.folder is None:
    folder = ""
else:
    folder = '/' + args.folder

_TOP_LEVELS = args.toplevels
_WAIT_SECONDS = args.wait
_FIRST_LEVEL_CONTINUE_FROM = args.continue_from

if args.dryrun:
    _DRY_RUN = True

if args.show:
    _SHOW = True

# Pending is implemented as a STACK - so append to end, pop the last element
actual_level: int = 0
baseContent = Content(folder, 0, 'd', '', actual_level)
pending: [] = [baseContent]
while len(pending) > 0:
    element: Content = pending.pop()
    sourceContents: [Content] = []
    destinationContents: [Content] = []
    while len(sourceContents) == 0:
        print("🔁 Syncing", element.path, element.name)
        if debug_mode:
            input("Press ENTER to continue")
        sourceContents = source_ls(sourceRoot, element)
    destinationContents = destination_ls(destRoot, element)

    # First version of this program used a simultaneous loop through booth list.
    # But as it's prone to errors and more difficult to debug and refactor... just abandoned it in favor of sequential.
    for sourceItem in sourceContents:
        try:
            # Find and get matching element
            destinationItem = destinationContents[destinationContents.index(sourceItem)]
            if sourceItem.path != destinationItem.path:
                print(sourceItem.to_string())
                print(destinationItem.to_string())
                exit(0)
            destinationContents.remove(destinationItem)  # Purge it
        except ValueError:
            destinationItem = None

        if destinationItem is None:  # Element exists only in Source
            if sourceItem.is_dir():
                print("\t⏩", sourceItem.path, '/', sourceItem.name, "- New folder added to queue")
                pending.append(sourceItem)
            else:
                print("\t⏬", sourceItem.path, '/', sourceItem.name, "- New file - downloading")
                download(sourceRoot, destRoot, sourceItem)
        else:  # Element exists in both sides
            if sourceItem.is_dir():
                print("\t⏩", sourceItem.path, '/', sourceItem.name, "- Existing folder, added to queue")
                pending.append(sourceItem)
            else:
                if sourceItem.size == destinationItem.size:
                    if _SHOW:
                        print("\t✅", sourceItem.path, '/', sourceItem.name)
                else:
                    print("\t⏬", sourceItem.path, '/', sourceItem.name,
                          "- Existing file, but different size found - updating")
                    destination_remove(destRoot, destinationItem)
                    download(sourceRoot, destRoot, sourceItem)

    for destinationItem in destinationContents:  # Those element exists only in Destination
        if (destinationItem.level == 1) and _FIRST_LEVEL_CONTINUE_FROM != "":
            # In case of "Continue from", on first level we should take no action
            # Diff sorts + filtering makes some elements not reliable
            break
        if destinationItem.is_dir():
            print("\t❌", destinationItem.path, '/', destinationItem.name,
                  "- Deprecated folder - moving to deleted folder")
        else:
            print("\t❌", destinationItem.path, '/', destinationItem.name,
                  "- Deprecated file - moving to deleted folder")
        # destination_remove(destRoot, element, destinationItem)
