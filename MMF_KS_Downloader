// ==UserScript==
// @name         MMF_KS_Downloader
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Download Kickstarter files from MyMiniFactory
// @author       You
// @match        https://www.myminifactory.com/library*
// @grant        none
// ==/UserScript==

'use strict';

let cartMenuOption = document.querySelector("#top-bar-basket");
cartMenuOption.insertAdjacentHTML("afterend", "<button id='addHackButton' style='display: block; border: 1px solid #DCDEDD;' onclick='window.addHack()'>Add hack</button>");


window.addHack = function ()
{
    var campaigns = document.querySelectorAll('#container-campaigns div.user-group-title > i');
    campaigns.forEach(function(campaign) {
            campaign.insertAdjacentHTML("afterend","<button class='fullDownloadButton' style='display: block; border: 1px solid #DCDEDD;' onclick='window.fullDownload(this)'>Full Download</button>");
    });
    document.getElementById("addHackButton").remove();
            var feedback = document.createElement("div");
        feedback.innerHTML = `
<div id='feedback' style='display:none; z-index: 9; margin: 30px; background: #A0D3E8; border:2px; border-color: black; position:fixed; bottom:0; left: 0; padding: 5px'>
<span id='feedbackLine1'></span>
<br>
<span id='feedbackLine2'></span>
</div>`;
        document.body.appendChild(feedback);
};

let feedbackSelector = "#feedback";
let selectorForFiles = "div.container-objects li.li-object-group div.object-user-group";
let campaignTitleSelector = "p.campaign-title";
window.fullDownload = async function (downloadButton) {
    let parent = downloadButton.closest('li.li-user-group');
    let campaign = parent.closest(".campaign-card");

    let allDownloads = parent.querySelectorAll(selectorForFiles);

    if (confirm("Are you sure you want to download all " + allDownloads.length + " elements?")) {
        let campaignNameArray = cleanStringForFilename(campaign.querySelector(campaignTitleSelector).textContent.trim()).split(" by ");
        let campaignName = campaignNameArray[1] + " KS - " + campaignNameArray[0];
        let filePrefix = "[" + campaignName + "]"; // TODO improve with GUID

        let feedback = document.getElementById("feedback");
        feedback.style.display = "block";
        var numDownloads = allDownloads.length;
        for (var i=0;i<numDownloads;i=i+1) {
            let urls = allDownloads[i].querySelectorAll('a.mmfgreen');
            let image = allDownloads[i].querySelector('img');
            let name = allDownloads[i].querySelector('.object-name').textContent;
            setFeedback(1, "Downloading file " + (i+1) + "/" + numDownloads + " - " + name);

            // First, get content
            var savedFilename = await window.fileDownload(urls[0].href, filePrefix + name);

            // Now, compute WHICH image to download, and name to store it
            await window.fileDownload(getFullSizeImageURL(image.src),savedFilename);

            console.log('Downloaded completed ' + i);
        }
        feedback.style.display = "none";
        makeCampaignFile(campaignName, filePrefix);
    }
};

function getFullSizeImageURL(popUpURL) {
    return popUpURL.replace(/\/images\/[0-9X]*-/,"/images/");
}

function setFeedback(lineNumber, messageText) {
    document.getElementById("feedbackLine" + lineNumber).innerHTML = messageText;
}

function cleanStringForFilename(filenameToUse) {
    return filenameToUse.replace(/[/\\?%*:|"<>]/g, '');
}

function getFilenameAndExtension(url) {
    // First, trim extra parameters (if present)
    var filteredUrl = url.toString().split("?")[0]
    // then get everything after last /
    filteredUrl=filteredUrl.substring(filteredUrl.lastIndexOf('/') + 1)
    return filteredUrl;
}

function makeCampaignFile(campaignName, filePrefix) {
    let content = "";
    content=content.concat('#Post-download process script for ', campaignName, '\n');
    content=content.concat('#Create new dir and move everything there\n');
    content=content.concat('mkdir "', campaignName, '"\n');
    content=content.concat('mv "', filePrefix, '"* "', campaignName, '"\n');
    content=content.concat('cd "', campaignName, '"\n');
    content=content.concat('#Process all ZIP files\n');
    content=content.concat('for zipfile in *.zip\n');
    content=content.concat('  do\n');
    content=content.concat('    echo "Processing ZIP file [$zipfile]"\n');
    content=content.concat('    filename=$(echo "$zipfile" | sed -e \'s/\.[^.]*$//\')\n');
    content=content.concat('    mkdir "$filename"\n');
    content=content.concat('    unzip "$zipfile" -d "$filename"\n');
    content=content.concat('    #Repack with 7z\n');
    content=content.concat('    7za a -r -t7z -mx=9 -xr!.DS_Store "${filename%/}.7z" "$filename"\n');
    content=content.concat('    #Remove dir and contents\n');
    content=content.concat('    rm -r "$filename"\n');
    content=content.concat('    #Remove zipfile\n');
    content=content.concat('    rm "$zipfile"\n');
    content=content.concat('  done\n');
    content=content.concat('cd ..\n');

    let file = new Blob([content], {type: "text/plain;charset=utf-8"});

    var a = document.createElement("a");
    var objectURL = URL.createObjectURL(file);
    a.href=objectURL;
    a.download = campaignName + ".sh";
    document.body.appendChild(a);
    a.click();
    setTimeout(function() {
        document.body.removeChild(a);
        window.URL.revokeObjectURL(objectURL);
    }, 0);
}

window.fileDownload = async function(url, filenameToUse) {
    // Step 1: start the fetch and obtain a reader
    let response = await fetch(url);
    const reader = response.body.getReader();
    const contentLength = +response.headers.get('Content-Length');
    console.log(response.headers);

    let receivedLength = 0;
    let chunks = [];
    while(true) {
        const {done, value} = await reader.read();
        if (done) {
            break;
        }
        chunks.push(value);
        receivedLength += value.length;
        let pctLength = ((receivedLength / contentLength)*100).toFixed(1);
        setFeedback(2, `Received ${(receivedLength/1024).toFixed(0)}k of ${(contentLength/1024).toFixed(0)}k - ${pctLength}%`);
    }

    let file = new Blob(chunks);

    var a = document.createElement("a");
    var objectURL = URL.createObjectURL(file);
    a.href=objectURL;
    var savedFilename = getFilenameAndExtension(response.url);
    // If we have a filenameToUse, use it, but keep extension
    if (filenameToUse) {
        filenameToUse = cleanStringForFilename(filenameToUse);
        // If filenameToUse has an extension, remove it ... then add the actual one
        savedFilename=filenameToUse.split(".")[0] + savedFilename.substring(savedFilename.lastIndexOf("."));
    }
    a.download = savedFilename;
    document.body.appendChild(a);
    a.click();
    setTimeout(function() {
        document.body.removeChild(a);
        window.URL.revokeObjectURL(objectURL);
    }, 0);
    return savedFilename;
};
